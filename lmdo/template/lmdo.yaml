# ******************************
# @mandatory
# @description: microservice name
# *******************************
Service: superman

# **********************************
# @mandatory
# @description: microservice creator
# **********************************
User: default

# ***************************************************************
# @mandatory
# @description: AWS credential profile name, default to 'default'
# ***************************************************************
Profile: default
# Or
# Region: AWS Region Code
# AWSKey: aws access key id
# AWSSecret: aws secret access key
# AWSSessionToken: aws session token

# ***********************************
# @mandatory
# @description: stage of your service
# ***********************************
Stage: dev

# ***********************************************************************
# @optional
# To create value for the environment variable
# ***********************************************************************
#EnvExportMap:
#  EnvName1: String
#  EnvName2: $env|env_name
#  EnvName3: $stack|stack-name::key

# ***********************************************************************
# @optional
# ***********************************************************************
#CloudFormation:
#    S3Bucket: blah.com.au                   
#    TemplateRepoPath: path_to_template     
#    Stacks:
#        - Name: stack_one                    
#          DisablePrefix: False               
#          TemplatePath: path_to_the_template  
#          ParamsPath: path_of_params         

# *************************************************************
# @optional
# CloudWatch Event setup
# Actual Rule name will be using {User}-{Stage}-{Service}-name 
# if DisablePrefix is False
# *************************************************************
#CloudWatchEvent:
#    - Name: rule_name                            
#      Description: Rule description              
#      DisablePrefix: False                       
#      ScheduleExpression: cron(0 20 * * ? *)     
#      EventPatternFile: path/to/pattern/file     
#      RoleArn: role_arn                          
#      Targets:                                   
#          - Type: default                        
#            Arn: AWS resource arn
#          - Type: local                          
#            FunctionName: local-lambda-name

# ****************************************************
# @optional
# @description: static asset to deploy to given bucket
# ****************************************************
# AssetS3Bucket: static.bucket.name
# AssetDirectory: build

# **********************************************************************
# @mandatory if having APIGateway
# @description: let lmdo know what the api name will be if using swagger
# **********************************************************************
# ApiGatewayName: api-title
# ApiVarMapToFile:  
#     $apiIntegrationRequestTemplate: api_integration_request_template.json
# ApiVarMapToVar:  
#     $apiRandomVar: randomValue
#     $apiRandomVar: $stack|stack-name::output-key

# ***********************************************
# @optional
# @description:
# If you are working in virtualenv environment
# set this to True so that the packaging of lambda
# functions can pick up the dependencies
# ************************************************
# VirtualEnv: False

# ****************************************
# @optional
# @description: lambda functions to deploy
# ****************************************
#Lambda:
    #*** Standard lambda function
#    - S3Bucket: lambda.bucket.name        
#      Type: default                       
#      FunctionName: superman              
#      Description: blah                   
#      Handler: handler.fly                
#      MemorySize: 128                     
#      RoleArn: rolearn                    
#      RolePolicy:                             
#        AssumeRoles:                      
#          - apigateway.amazonaws.com      
#        PolicyDocument: policy.json       
#        ManagedPolicyArns:                
#          - arn:aws:blah
#      Runtime: python2.7                  
#      Timeout: 180                        
#      HeatUp: False                       
#      HeatRate: rate(4 minutes):         
#      Tracing: False 
#      VpcConfig:                          
#          SecurityGroupIds:
#              - string
#              - string
#          SubnetIds:
#              - string
#              - string
#      EnvironmentVariables:              
#          MYSQL_HOST: localhost
#          MYSQL_PASSWORD: secret
#          MYSQL_USERNAME: admin
#          MYSQL_DATABASE: lmdo
#      EventSource:
#         - Type: s3
#           BucketName: [name of the bucket]
#           # Optional, default to "s3:ObjectCreated:*", "s3:ObjectRemoved:*" 
#           Events:
#             - "s3:ObjectCreated:Put"
#           # Optional
#           FilterRules:
#             - Name: 'prefix'|'suffix'
#               Value: string
#           # Optional default to False
#           Delete: False
#         - Type: sns
#           Topic: [name of the SNS topic]
#           # Optional default to False
#           Delete: False


    #*** Django bridged lambda function
#    - S3Bucket: lambda.bucket.name        
#      Type: django                        
#      DisableApiGateway: False            
#      ApiBasePath: /path                  
#      FunctionName: superman              
#      CognitoUserPoolId: ap-southeast-2_blahblah    
#      MemorySize: 128                     
#      RoleArn: rolearn                    
#      RolePolicy:                             
#        AssumeRoles:                      
#          - apigateway.amazonaws.com      
#        PolicyDocument: policy.json       
#        ManagedPolicyArns:                
#          - arn:aws:blah
#      Runtime: python2.7                  
#      Timeout: 180                        
#      VpcConfig:                          
#          SecurityGroupIds:
#              - string
#              - string
#          SubnetIds:
#              - string
#      EnvironmentVariables:                       
#          DJANGO_SETTINGS_MODULE: mysite.settings      

  #*** Cloudwatch Event dispatcher lambda function
#    - S3Bucket: lambda.bucket.name        
#      Type: cron_dispatcher              
#      MemorySize: 128                     
#      Runtime: python2.7                  
#      Timeout: 180                        
#      VpcConfig:                          
#          SecurityGroupIds:
#              - string
#              - string
#          SubnetIds:
#              - string
#      EnvironmentVariables:                       
#          DJANGO_SETTINGS_MODULE: mysite.settings      
#      RuleHandlers:
#          - Handler: bla.blah.handler
#            Rate: Rate(1 minutes) 

  #*** golang lambda function
#    - S3Bucket: lambda.bucket.name        
#      Type: go
#      ExecutableName: gocode                       
#      FunctionName: superman              
#      Description: blah                   
#      MemorySize: 128                     
#      RoleArn: rolearn                    
#      RolePolicy:                             
#        AssumeRoles:                      
#          - apigateway.amazonaws.com      
#        PolicyDocument: policy.json       
#        ManagedPolicyArns:                
#          - arn:aws:blah
#      Runtime: python2.7                  
#      Timeout: 180                        
#      HeatUp: False                       
#      HeatRate: rate(4 minutes):          
#      VpcConfig:                          
#          SecurityGroupIds:
#              - string
#              - string
#          SubnetIds:
#              - string
#              - string
#      EnvironmentVariables:
#          DEBUG: true|false              
#          MYSQL_HOST: localhost
#          MYSQL_PASSWORD: secret
#          MYSQL_USERNAME: admin
#          MYSQL_DATABASE: lmdo
#      EventSource:
#         - Type: s3
#           BucketName: [name of the bucket]
#           # Optional, default to "s3:ObjectCreated:*", "s3:ObjectRemoved:*" 
#           Events:
#             - "s3:ObjectCreated:Put"
#           # Optional
#           FilterRules:
#             - Name: 'prefix'|'suffix'
#               Value: string
#           # Optional default to False
#           Delete: False
#         - Type: sns
#           Topic: [name of the SNS topic]
#           # Optional default to False
#           Delete: False


